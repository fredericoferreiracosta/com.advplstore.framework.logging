#include "protheus.ch"
#include "fileio.ch"

/*/{Protheus.doc}
Console implementation for the AdvPL Store logging service.
Will print the log messages in the TOTVS Console using ConOut
function.

Permission is hereby granted, free  of charge, to any person obtaining
a  copy  of this  software  and  associated  documentation files  (the
"Software"), to  deal in  the Software without  restriction, including
without limitation  the rights to  use, copy, modify,  merge, publish,
distribute,  sublicense, and/or sell  copies of  the Software,  and to
permit persons to whom the Software  is furnished to do so, subject to
the following conditions:
The  above  copyright  notice  and  this permission  notice  shall  be
included in all copies or substantial portions of the Software.
THE  SOFTWARE IS  PROVIDED  "AS  IS", WITHOUT  WARRANTY  OF ANY  KIND,
EXPRESS OR  IMPLIED, INCLUDING  BUT NOT LIMITED  TO THE  WARRANTIES OF
MERCHANTABILITY,    FITNESS    FOR    A   PARTICULAR    PURPOSE    AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE,  ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Read more at https://github.com/fredericoferreiracosta/com.advplstore.framework.logging
/*/
Class TextFileLogAppender
    /*/{Protheus.doc}
    Default constructor.
    /*/
    Public Method New() Constructor

    /*/{Protheus.doc}
    Execute the logging action. Returns nothing.
    /*/
    Public Method Execute(cLog)
EndClass

Method New() Class TextFileLogAppender
Return Self

Method Execute(cLog) Class TextFileLogAppender
    Local nHandler
    Local cLogPath := SuperGetMV("MV_LOGPATH",, "\logs\")
    Local cFileName := "logger-" + DToS(Date()) + ".log"

    If Right(cLogPath, 1) != "\"
        cLogPath += "\"
    EndIF

    If !ExistDir(cLogPath)
		If MakeDir(cLogPath) != 0
			ConOut("It was not possible to create folder " + cLogPath)
            Return
		EndIf
	EndIf

    If !File(cLogPath + cFileName)
		nHandler := FCreate(cLogPath + cFileName)
        If nHandler == -1
            ConOut("Error while trying to create file " + cLogPath + cFileName + ". Error code: " + CValToChar(FError()))
            Return
        EndIf
        FClose(nHandler)
	EndIf

    nHandler := FOpen(cLogPath + cFileName, FO_READWRITE + FO_SHARED)
    If nHandler == -1
        ConOut("Error while trying to open file " + cLogPath + cFileName + ". Error code: " + CValToChar(FError()))
        Return
    EndIf
    FSeek(nHandler, 0, FS_END)
    FWrite(nHandler, cLog + Chr(13) + Chr(10))

    FClose(nHandler)
Return
